#!/usr/bin/perl

#
# Jeff Mock
# 2030 Gough 
# San Francisco, CA 94109
# jeff@mock.com
# (c) 2004
#

#
# $Id: pnet_mkdlpf_coeff 1012 2007-09-12 00:45:26Z jeff $
#

use Getopt::Long;
use Math::Trig;
use Math::BigInt;
use POSIX;

# Window types
%windows = (
    'none'      => 1,
    'rect'      => 1,
    'hamming'   => 1,
    'hanning'   => 1,
    'blackman'  => 1,
    'bartlett'  => 1,
    'tri'       => 1,
    'fft'       => 1,
);

$mean_gain      = 1.0;

$opt_width      = 16;   # datapath width
$opt_dec        = 0;    # filter decimation (length of table)
$opt_fwid       = 8;
$opt_window     = "hanning";
$opt_narrow     = 1.00;
$opt_gain       = 1.00;
$opt_fn         = "dlpf_coeff";

$0 =~ /(.*)\/.*/;
# binmode(STDIN, ":bytes") if $] >= 5.008;

%opts = (
    'width=o'                   => \$opt_width,
    'dec=o'                     => \$opt_dec,
    'fwid=o'                    => \$opt_fwid,
    'window=s'                  => \$opt_window,
    'narrow=f'                  => \$opt_narrow,
    'gain=f'                    => \$opt_gain,
    'fn=s'                      => \$opt_fn,
);

$wins = join ' ', keys %windows; 
if (!GetOptions(%opts)) {
    print STDERR "
        Generate coefficient table for decimating low pass filter
        
        mkdlpf_coeff [options]
            [--width=n]     Datapath width of FFT ($opt_width)
            [--dec=n]       Length of table ($opt_dec)
            [--fwid=n]      Total width of filter (x pi) ($opt_fwid)
            [--window=s]    Windowing function:
                ${wins}
            [--idx=n]       Index to add to end of name
            [--narrow=f]    Compress sync function ($opt_narrow)
            [--gain=f]      Scale filter gain ($opt_gain)
            [--fn=s]        Filename for coefficients

    \n";
    exit 1;
}

die "Window type ${opt_window} not defined" 
    unless $windows{$opt_window};

sub dlpf_coeff_vals {
    my  $start = shift;
    my  $stop = shift;
    my  $width = shift;
    my  $n = shift;
    my  $fwid = shift;
    my  $first = shift;

    my  @vals = ();
    my  @cmts = ();
    my  $highbit = 1 << ($width-1);
    my  $mask = (1 << $width) - 1;
    my  $new_gain;

    if ($opt_window eq "fft") {
        # This is a dummy for testing that puts 1's in
        # the last coefficient rom and 0's in the other ROMs
        # for a unity transfer function from the filter. 
        #
        if ($start == $fwid/2) {
            # 1's
            for my $idx (0 .. $n-1) {
                my $hex = ($highbit-1) & $mask;
                my $cmt = "1";
                push @vals, Math::BigInt->new($hex);
                push @cmts, $cmt;
            }
        } else {
            # 0's
            for my $idx (0 .. $n-1) {
                my $hex = 0;
                my $cmt = "0";
                push @vals, Math::BigInt->new($hex);
                push @cmts, $cmt;
            }
        }
    } else {
        # Generate floating vals for portion of sin(x)/x
        # for my $idx (0 .. $n-1) {
        #     my $t = $start + ($stop-$start)*$idx/$n;

        # Make values for entire window, not just this
        # coefficient ROM.
        #
        for my $idx (0 .. $n*$opt_fwid-1) {
            # offset value for even function to take advantage
            # of symmetry and reduce number of multipliers by half.
            #
            my $t = $opt_fwid/2 - ($idx+0.5)/$n;

            my $v = 1.0; 
            $v = 1.0 * $opt_narrow * sin($t * pi / $opt_narrow) / ($t * pi) 
                if ($t != 0);
            my $cmt = sprintf("sinc(%.3f * pi / %.3f )", $t, $opt_narrow);
            push @vals, $v;
            push @cmts, $cmt;
        }
        if ($opt_window eq "tri" || $opt_window eq "bartlett") {
            # Triangle windowing function
            for my $idx (0 .. $n*$opt_fwid-1) {
                my $t = $opt_fwid/2 - ($idx+0.5)/$n;
                my $m = 1.0 - abs($t / ($opt_fwid/2));
                $vals[$idx] *= $m;
                $cmts[$idx] = sprintf("%s * %.3f = %.3f", $cmts[$idx],
                    $m, $vals[$idx]);
            }
        } elsif ($opt_window eq "hanning") {
            # Triangle windowing function
            for my $idx (0 .. $n*$opt_fwid-1) {
                my $t = $opt_fwid/2 - ($idx+.5)/$n;
                my $m = abs($t / ($opt_fwid/2)) * pi;
                $m = 0.5 + 0.5*cos($m);
                $vals[$idx] *= $m;
                $cmts[$idx] = sprintf("%s * %.3f = %.3f", $cmts[$idx],
                    $m, $vals[$idx]);
            }
        } elsif ($opt_window eq "hamming") {
            # Triangle windowing function
            for my $idx (0 .. $n*$opt_fwid-1) {
                my $t = $opt_fwid/2 - ($idx+0.5)/$n;
                my $m = abs($t / ($opt_fwid/2)) * pi;
                $m = 0.54 + 0.46*cos($m);
                $vals[$idx] *= $m;
                $cmts[$idx] = sprintf("%s * %.3f = %.3f", $cmts[$idx],
                    $m, $vals[$idx]);
            }
        } elsif ($opt_window eq "blackman") {
            # Triangle windowing function
            for my $idx (0 .. $n*$opt_fwid-1) {
                my $t = $opt_fwid/2 - ($idx+0.5)/$n;
                my $m = abs($t / ($opt_fwid/2)) * pi;
                $m = 0.42 + 0.5*cos($m) + 0.08*cos(2.0*$m);
                $vals[$idx] *= $m;
                $cmts[$idx] = sprintf("%s * %.3f = %.3f", $cmts[$idx],
                    $m, $vals[$idx]);
            }
        } elsif ($opt_window eq "none" || $opt_window eq "rect") {
            # Just fixup comments...
            for my $idx (0 .. $n*$opt_fwid-1) {
                my $cmt = sprintf("%s = %.4f", $cmts[$idx], $vals[$idx]);
                $cmts[$idx] = $cmt;
            }
        } else {
            die "Botch: failed to handle window type ${opt_window}";
        }

        # Calculate peak filter value and DC gain
        my $peak = 0.0;
        my $gain = 0.0;
        my $gain_tot = 0;
        my $gain_min = 10.0;
        my $gain_max = 0.0;
        my $gain_sum = 0.0;
        my $peak_sum = 0.0;
        for my $pos (0 .. $n-1) {
            $gain_sum = 0.0;
            $peak_sum = 0.0;
            for ($i=0; $i<$opt_fwid*$n; $i+=$n) {
                $gain_sum += $vals[$i+$pos];
                $peak_sum += abs($vals[$i+$pos]);
            }
            $peak = $peak_sum if $peak_sum>$peak;
            $gain_max = $gain_sum if $gain_sum>$gain_max;
            $gain_min = $gain_sum if $gain_sum<$gain_min;
            $gain_tot += $gain_sum;
        }
        $gain = $gain_tot / $n;
        $mean_gain = $gain;

        $new_gain = $opt_gain / $peak;

        # Scale values for unity peak gain
        $_ *= $new_gain for (@vals);

        printf "\n    DC gain scaled to %.3f for peak gain of 1.0\n", 
            $new_gain if $first;

        $gain_min *= $new_gain;
        $gain_max *= $new_gain;
        $gain *= $new_gain;
        $peak *= $new_gain;

        for my $v (@vals) {
            die "Filter coefficient outside range of [-1..1) ($v)" 
                if ($v >= 1.0 || $v < -1.0);
        }

        if ($first) {
            printf "    gain min %.3f\n", $gain_min;
            printf "    gain max %.3f\n", $gain_max;
            printf "    gain     %.3f\n", $gain;
            printf "    peak     %.3f\n", $peak;
            printf "\n";
        }

        $si = ($opt_fwid/2 - $start)*$opt_dec;
        @vals = @vals[$si..$si+$n-1];
        @cmts = @cmts[$si..$si+$n-1];

        # Convert floating vals to hex BigInt of appropriate width
        for my $idx (0 .. $n-1) {
            my $hex = int(($vals[$idx]*$highbit) + 0.5);
            $hex = ($highbit-1) if $hex >= $highbit;
            $hex = $hex & $mask;
            $vals[$idx] = Math::BigInt->new($hex);
        }
    }
    return (\@vals, \@cmts);
}

sub dlpf_coeff_table {
    my $vals;
    my $cmts;
    my $fd;

    die "Need to specify decimation with --dec=n"
        if $opt_dec==0;
    for my $c (0 .. $opt_fwid/2-1) {
        my $fn = sprintf "%s.%04d.%d", $opt_fn, $opt_dec, $c;
        my $start = $c - $opt_fwid/2 + 1;
        my $stop = $start-1;

        open $fd, "> $fn" or die "Cannot open output file $fn";

        ($vals,$cmts) = dlpf_coeff_vals($start, $stop, $opt_width,
                $opt_dec, $opt_fwid, $c==0);

        my $n = @$vals;
        for my $i (0 .. $n-1) {
            my $v = $$vals[$i]->numify();
            printf $fd "%04x\n", $v;
        }
        if ($n == 2) {
            for my $i (0 .. $n-1) {
                my $v = $$vals[$i]->numify();
                printf $fd "%04x\n", $v;
            }
        }
        close $fd;
    }
    exit 0;
}

dlpf_coeff_table();
