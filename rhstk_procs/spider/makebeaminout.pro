pro makebeaminout, scndata, strip, beamin_initial, beamin_initial_cont, $
	 beamout_initial, beamout_initial_cont

;+
;GENERATES THE STRUCTURE BEAMIN amd BEAMOUT...
;BEAMIN CONTAINS ALL ESSENTIAL INPUT POSITION AND STOKES DATA FOR
;       DETERMINING THE BEAM AND MATRIX ELEMENTS in a single pattern...

;08sep03: ptsperstrip read from data instead of pre-specifying.
; Jun 19, 2007: Tim adds backend tag to beamin_initial
;-

scndata.ptsperstrip= n_elements( strip[0].subscan)

nr_mappts= scndata.nrstrips* scndata.ptsperstrip 
nr_datapts= nr_mappts+ scndata.ptsforcal
nr_strippts= scndata.ptsperstrip
nr_strips= scndata.nrstrips

;nchnls= scndata.nchnls
nchnls= strip[0].nchan

BEAMIN_INITIAL = { $
                 backend: '',$ ; Backend !!! Tim adds this 6/19/07
	rcvrn: 0, $rcvr number
	rcvrname: '', $rcvrname
	cfr: 0.d0, $ center freq
	bw:  0.d0, $ BW
	bwsign: 0., $ +/- 1; sign of freq increase with chnl nr
	tcalxx: 0., $tcalxx
	tcalyy: 0., $tcalyy
	scannr: 0l, $scan nr
        antlong: 0.d0, $
        antlat: 0.d0, $
        hpbw_guess : 0.0, $; assumed HPBW for nonlinear Gaussian fit to beam
	nchnls: 0, $; nr of chnls in input spectra.
;       az: fltarr( nrpts, 4), $
;       za: fltarr( nrpts, 4), $
 azencoders: fltarr( nr_strippts, nr_strips), $; az encoders, $
;               excluding the cal points. degrees. 
 zaencoders: fltarr( nr_strippts, nr_strips), $; za encoders, $
;               excluding the cal points. degrees. 
  tempfits: fltarr( 4, nr_strippts, 4),  $ ; output from beam1dfit
; stokesc1: fltarr( nchnls, 4, nr_datapts),   $; original calibrated stkdata
 azoffsets: fltarr( nr_strippts, nr_strips), $; az offset from cntr, arcmin
 zaoffsets: fltarr( nr_strippts, nr_strips), $; za offset from cntr, arcmin
totoffsets: fltarr( nr_strippts, nr_strips), $; tot offset from cntr, arcmin
stkoffsets_chnl: fltarr( nchnls, 4, nr_strippts, nr_strips), $ ;stk param at offset points, K
stkoffsets_cont: fltarr( 4, nr_strippts, nr_strips), $ ;chnl-integrated stk params, K
calphase_zero: fltarr( 2),  $ cal phase at band center, radians; and its error
calphase_slope: fltarr( 2), $ cal phase slope, rad/MHz; and its error
srcphase_zero: fltarr( 2),  $ src phase at band center, radians; and its error
srcphase_slope: fltarr( 2) $ src phase slope, rad/MHz; and its error
}

BEAMIN_INITIAL_CONT = { $
                 backend: '',$ ; Backend !!! Tim adds this 6/19/07
	rcvrn: 0, $ rcvr number
	rcvrname: '', $ rcvrname
	cfr: 0.d0, $ center freq
	bw:  0.d0, $ BW
	bwsign: 0., $ +/- 1; sign of freq increase with chnl nr
	tcalxx: 0., $tcalxx
	tcalyy: 0., $tcalyy
        antlong: 0.d0, $
        antlat: 0.d0, $
	scannr: 0l, $scan nr
        hpbw_guess : 0.0, $; assumed HPBW for nonlinear Gaussian fit to beam
	nchnls: 0, $; nr of chnls in input spectra.
;       az: fltarr( nrpts, 4), $
;       za: fltarr( nrpts, 4), $
 azencoders: fltarr( nr_strippts, nr_strips), $; az encoders, $
;               excluding the cal points. degrees. 
 zaencoders: fltarr( nr_strippts, nr_strips), $; za encoders, $
;               excluding the cal points. degrees. 
  tempfits: fltarr( 4, nr_strippts, 4),  $ ; output from beam1dfit
; stokesc1: fltarr( nchnls, 4, nr_datapts),   $; original calibrated stkdata
 azoffsets: fltarr( nr_strippts, nr_strips), $; az offset from cntr, arcmin
 zaoffsets: fltarr( nr_strippts, nr_strips), $; za offset from cntr, arcmin
totoffsets: fltarr( nr_strippts, nr_strips), $; tot offset from cntr, arcmin
;stkoffsets_chnl: fltarr( nchnls, 4, nr_strippts, nr_strips), $ ;stk param at offset points, K
stkoffsets_cont: fltarr( 4, nr_strippts, nr_strips), $ ;chnl-integrated stk params, K
calphase_zero: fltarr( 2),  $ cal phase at band center, radians; and its error
calphase_slope: fltarr( 2), $ cal phase slope, rad/MHz; and its error
srcphase_zero: fltarr( 2),  $ src phase at band center, radians; and its error
srcphase_slope: fltarr( 2) $ src phase slope, rad/MHz; and its error
}

;------
;BEAMOUT CONTAINS ALL info from the beam fits.
;the complex arrays, fhgt, fcen, fhpbw are generated by ft_sidelobes.pro
;-

BEAMOUT_INITIAL = { $
	azcntr: fltarr( 4), $ ;central azencoders of the 4 strips, deg
	zacntr: fltarr( 4), $ ;central zaencoders of the 4 strips, deg
	pacntr: fltarr( 4), $ ;central paencoders of the 4 strips, deg
        b2dfit: fltarr( 50, 2), $ ;the output array from beam2dfit.pro
          fhgt: complexarr( 8), $ ;Fourier coeffs of sidelobe hgt
          fcen: complexarr( 8), $ ;Fourier coeffs of sidelobe cntr
        fhpbw: complexarr( 8),  $ ;Fourier coeffs of sidelobe hpbw
  stripfit: fltarr( 12, 4, 4),  $ ; output from beam1dfit
sigstripfit: fltarr( 12, 4, 4), $ ; output from beam1dfit
stripfit_chnl: fltarr( nchnls, 12, 4, 4), $; stripfit for each chnl
;sigstripfit_chnl: fltarr( nchnls, 12, 4, 4), $; sigstripfit for each chnl
;;;;  tempfits: fltarr( 4, 60, 4),  $ ; output from beam1dfit
                sourceflux: 0., $ ;source flux from flxsource
	       sourcename: '',  $ ;source name (!)
	tcalxx: 0., $tcalxx
	tcalyy: 0., $tcalyy
        antlong: 0.d0, $
        antlat: 0.d0 $
}

;------
;BEAMOUT CONTAINS ALL info from the beam fits.
;the complex arrays, fhgt, fcen, fhpbw are generated by ft_sidelobes.pro
;-

BEAMOUT_INITIAL_CONT = { $
	azcntr: fltarr( 4), $ ;central azencoders of the 4 strips, deg
	zacntr: fltarr( 4), $ ;central zaencoders of the 4 strips, deg
	pacntr: fltarr( 4), $ ;central paencoders of the 4 strips, deg
        b2dfit: fltarr( 50, 2), $ ;the output array from beam2dfit.pro
          fhgt: complexarr( 8), $ ;Fourier coeffs of sidelobe hgt
          fcen: complexarr( 8), $ ;Fourier coeffs of sidelobe cntr
        fhpbw: complexarr( 8),  $ ;Fourier coeffs of sidelobe hpbw
  stripfit: fltarr( 12, 4, 4),  $ ; output from beam1dfit
sigstripfit: fltarr( 12, 4, 4), $ ; output from beam1dfit
;stripfit_chnl: fltarr( nchnls, 12, 4, 4), $; stripfit for each chnl
;sigstripfit_chnl: fltarr( nchnls, 12, 4, 4), $; sigstripfit for each chnl
;;;;  tempfits: fltarr( 4, 60, 4),  $ ; output from beam1dfit
                sourceflux: 0., $ ;source flux from flxsource
	       sourcename: '',  $ ;source name (!)
	tcalxx: 0., $tcalxx
	tcalyy: 0., $tcalyy
        antlong: 0.d0, $
        antlat: 0.d0 $
}

return
end
