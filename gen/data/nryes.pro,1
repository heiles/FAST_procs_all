pro nryes, nolist, full_list, yeslist, yeslist_rev

;+
;calling sequence: NRYES, nolist, full_list, yeslist, yeslist_rev
;
;for editing data. you have a set of data with ndata elements. you will
;examine the data and discard certain ranges. the array full_list tells
;which data you have discarded. at the beginning, full_list is a
;sequential array ndata long:
;        full_list= lindgen( ndata)
;and as you discard ranges, the elements discarded are set equal to -1.
;you can enter multiple ranges. 
;to discard a single element, e.g. number 3, enter 
;        nolist=[3,3] 
;to discard 3 elements 5 to 7, enter 
;        nolist=[5,7]
;to discard both, you can do them sequentially or you can enter both
;simulaneously 
;        nolist[ 3,3,5,7]
;
;inputs:
;       NRYES, the paired list of indices that you want to exclude
;       FULL_LIST, the updated set of indices (previously deleted ones = -1)
;
;OUTPUTS:
;       FULL_LIST, the incrementally updated input FULL_LIST
;       YESLIST, the set of INDICES for which FULL_LIST is non-negative
;       (meaning: the set that you want to include)
;       YESLIST_REV, the set of VALUES in FULL_LIST that are non-negative
;               (so yeslist_rev= full_list[ yeslist])
;
;for a sequential list of indices ndata long (0 to ndata-1), and
;	NOLIST, a list od indices to exclude (paired limits),
;	YESLIST, the set of indices to include, and
;	YESLIST_REV, generate the set of indices that are not included in nolist.
;
;EXAMPLE
;	full_list = [0,1,2,3,4,5]
;	nolist= [2,4]
;       NRYES, nolist, full_list, yeslist, yeslist_rev
;	full_list= [0,1,-1,-1,-1,5]
;	yeslist= [0,1,5] (has 3 elements)
;	yeslist_rev= [0,1,5]
;-

;so that YESLIST is the set to include and each entry in YESLIST_REV 
;points to the oridinal ndata number 
;
;ndata_indx= yeslist_rev[ yeslist[ 2]]

;full_list= lindgen( ndata)

npairs= n_elements( nolist)/2l


for np=0, npairs-1l do begin
low=0 & high=0
lo= where( full_list ge nolist[ 0,np], countlo)
hi= where( full_list ge nolist[ 1,np], counthi)
if countlo ne 0 then low= lo[ 0] else print, 'LO PROBLEM'
if counthi ne 0 then high= hi[ 0] else begin
	print, 'HI PROBLEM'
	high= n_elements( full_list) -1l
endelse
full_list[ low:high]= -1
endfor

indx= where( full_list ne -1, count)

if count ne 0 then yeslist= full_list[ indx]

yeslist_rev= full_list[ yeslist]

;stop
end
