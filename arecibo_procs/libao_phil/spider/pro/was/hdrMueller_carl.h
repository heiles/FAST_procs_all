;+;
;   Define the various structures used in mueller matrix processing
;   01aug07. note that this routine differs from mm0/hdrMueller_carl.h
;            only in  4->8 in the   cal values...
;tcalxx_board:        fltarr(8), $; xx cal temps for the four boards
;tcalyy_board:        fltarr(8)  }; yy cal temps for the four boards

;	Note: all structures definitions are made here and
;         the variable scndata={scndata} is initialized with data.
;
;	scandata={SCNDATA} 	         : this defines the observing pattern
;
;	{MUELLER_carl}         : output from mm0 processing:
;	....{MUELLERFITI_carl} : total power fit info 
;	....{MUELLERFITPOL}    : polarized fit info
;	....{MUELLERPARAMS}    ; mueller matrix parameters. computed or applied 
;
;   {beaminput} 		   : holds the data used in the fitting of 1 pattern
;   {mmoutput}             : holds all info from the beamfits
;   {muellerparams_carl}   : parameters from mm4 mueller matrix fit.

;
;----------------------------------------------------------------------------
; STRUCTURE 'scndata' parameterizes the beetle scan
;----------------------------------------------------------------------------
nchnls    =128
ind       =indgen(nchnls)
contchnls =ind[8:119]
ncontchnls=n_elements(contchnls)
nrstrips   =4
ptsPerStrip=60
ptsForCal  =2
totPtsStrips=nrstrips*ptsPerStrip 
totPtsPat   =totPtsStrips + ptsForCal

;	THE SCAN INDICES FOR ON-SOURCE-PEAK AND OFF-SOURCE.

onscansInd = [ 31, 32, 91, 92, 151, 152, 211, 212]
offscansInd= [2, 61, 62, 121, 122, 181, 182, 241]

;THESE ARE THE INDICES FOR CALON, OFF WHEN OFF SOURCE ONLY.

indxcalon  = [ 0, 0]
indxcaloff = [ 1, 1]
;
scndata = { scndata, $
;	CHNLS TO USE FOR CONTINUUM, ALSO FOR CALIBRATION...
    nchnls:  			 nchnls,$;tot nr chnls in spectra
     chnls:           contchnls, $;channels to use in computing continuum
phasechnls:           contchnls, $;channels to get continuum phase
 gainchnls:  		  contchnls, $;channels to get continuum gain

;	THE EXPECTED NR OF POINTS PER STRIP, NR POINTS WITH CAL...

ptsperstrip:        ptsPerStrip,$;number of datapoints per strip 60
 ptsforcal:           ptsForCal, $;number of pts at beginning for calon/caloff 2
  nrstrips:            nrstrips, $; number of strips in pattern 4

;THE SCAN INDICES FOR ON-SOURCE-PEAK AND OFF-SOURCE...

   onscans:          onscansInd, $; indices for on-src peaks for each scan
  offscans:         offscansInd, $; indices for off-src points for each scan

;THESE ARE THE INDICES FOR CALON, OFF WHEN OFF SOURCE ONLY.
 indxcalon: 		  indxcalon, $; indices of cal on
indxcaloff:          indxcaloff, $; indices of cal off

;FIRST GUESS FOR DPDF...
      dpdf:                 0., $; assumed phase slope wrt freq, rad/MHz

;DATA ABOUT CALS...
tcalxx_board:        fltarr(8), $; xx cal temps for the four boards
tcalyy_board:        fltarr(8)  }; yy cal temps for the four boards
;
;----------------------------------------------------------------------------
;STRUCTURE {beaminput} holds the data used in the fitting of 1 pattern
;----------------------------------------------------------------------------
a = { BEAMINPUT, $
	rcvrn:   0 , $rcvr number
	tcalxx:  0., $tcalxx
	tcalyy:  0., $tcalyy
	scannr:  0l, $scan nr
hpbw_guess: 0.0, $;assumed HPBW for nonlinear Gaussian fit to beam
azencoders: fltarr(ptsPerStrip, nrStrips), $; az encdrs deg. excld cal strips
zaencoders: fltarr(ptsPerStrip, nrStrips), $; za encdrs deg. excld cal strips
  tempfits: fltarr(4,ptsPerStrip, nrStrips), $; output from beam1dfit
;  stokesc1: fltarr(nchnls    , 4, totPtsPat),$; original calibrated stkdata
 azoffsets: fltarr(ptsPerStrip, nrStrips)  , $; az offset from cntr, arcmin
 zaoffsets: fltarr(ptsPerStrip, nrStrips), $; za offset from cntr, arcmin
totoffsets: fltarr(ptsPerStrip, nrStrips), $; tot offset from cntr, arcmin
;stkoffsets_chnl: fltarr(nchnls, 4, ptsPerStrip, nrStrips),$; deg K
												;stk param at offset points
stkoffsets_chnl_cal: fltarr(nchnls, 4, ptsForCal),$; deg K
												;stk param for calOn,calOff
stkoffsets_cont: fltarr(4,ptsPerStrip,nrStrips),$;chnl-integrated stk params, K
  calphase_zero: fltarr( 2), $ cal phase at band center, radians; and its error
 calphase_slope: fltarr( 2), $ cal phase slope, rad/MHz; and its error
  srcphase_zero: fltarr( 2), $ src phase at band center, radians; and its error
 srcphase_slope: fltarr( 2)  $ src phase slope, rad/MHz; and its error
}
;----------------------------------------------------------------------------
;STRUCTURE {mmoutput} holds all info from the beamfits
;	the complex arrays, fhgt, fcen, fhpbw are generated by ft_sidelobes.pro
;----------------------------------------------------------------------------
a = { MMOUTPUT, $
	   azcntr: fltarr( 4), $ ;central azencoders of the 4 strips, deg
	   zacntr: fltarr( 4), $ ;central zaencoders of the 4 strips, deg
	   pacntr: fltarr( 4), $ ;central paencoders of the 4 strips, deg
       b2dfit: fltarr( 50, 2), $ ;the output array from beam2dfit.pro
         fhgt: complexarr( 8), $ ;Fourier coeffs of sidelobe hgt
         fcen: complexarr( 8), $ ;Fourier coeffs of sidelobe cntr
        fhpbw: complexarr( 8),  $ ;Fourier coeffs of sidelobe hpbw
     stripfit: fltarr( 12, 4, 4),  $ ; output from beam1dfit
  sigstripfit: fltarr( 12, 4, 4), $ ; output from beam1dfit
stripfit_chnl: fltarr( nchnls, 12, 4, 4), $; stripfit for each chnl
   sourceflux: 0., $ ;source flux from flxsource
	       sourcename: ''  $ ;source name (!)
}
