;+
;NAME:
;imgflat - flatten an image.
;SYNTAX: result=imgflat(data,code,ravg=ravg,col=[x1,x2],sig=sig,median=median,
;                       bptouse=bptouse,nobpc=nobpc,bpZero=bpZero)
;ARGS:   
;    data[x,y]   data to operate on
;    code     : int how to flatten image:
;               0  bandpass correct using the average of all strips.
;                  if /med set then use the median rather than the average.
;               n  bandpass correct n strips at a time, averaging n strips
;                  if /ravg is set then this is a running avg. If not,then
;                  break image into y/n sections and do 1 avg for each section.
;              -n  bandpass correct using bandpasses +/- n strips from the
;                  current line. 
;KEYWORDS:
;    ravg     :  if set and n> 0 then use a running average of n
;                  strips about the current line.
;    col[2]   :  after bandpass correction average columns x1 thru x2
;                and divide this into every column (to remove things
;                like continuum sources. Note that x1,x2 are zero based..
;    sig      : if set, return map in units of sigma
;   median    : if set then use the median rather than the average for code
;   bptouse[x] : if provided, use this for band pass correction. ignore code
;   nobpc      : if set then do not do a bandpass correction.
;   bpZero     : if set then the data has a mean close to zero. Division
;				 by an average bandpass. In this case:
;				 bpavg=total(data,2)
;				 val=mean(bpavg)
;	             bpavg=(bavg - val) +  bpZero)
;		       to correct:
;				  data[*,i]=data[*,i]/bpavg - val
;				 
;RESTRICTIONS:
;             if n > 0 then y must be divisible by n
;             if chn provided then x1 le x2 le x
;DESCRIPTION:
;    The data array d[x,y] has  x xpoints by y ypoints.
;The processing steps are:
;1. bandpass correct using the code provided.
;2. if chn[] is specified then average columns x1 through x2 and divide this
;into every column. 
;3. subtract 1 from the map.
;4. if sig is set, compute and then divide the map by the maps sigma.
;EXAMPLE:
;1. assume we have correlator data of 1024 lags by 300 records. Display
;   sbc 1 pol A and use columns 800-900 for leveling. On display, scale
;   the data to 2% of Tsys:
;   img=imgflat(b.b1.d[*,0],0,col=[800,900]) 
;   imgdisp,(img > (-.02))<.02,zy=2
;	Note: corimgdisp() does all this for you in 1 routine.
;2. Assume position switch correlator data of 300 recs/scan. Display
;   all 600 records using the 300 off records for the bandpass correction.
;   scale to 5% of Tsys:
;   print,corgetm(lun,600,b,scan=scan) ; read in 600 recs starting at on.
;   sbc=0
;   pol=0
;   bpc=coravg(b[300:599].(sbc).d[*,pol]) ; average the off data
;   img=imgflat(b.(sbc).d[*,pol],0,bptouse=bpc)
;   imgdisp,(img > (-.05))<.05 
;-
function imgflat,data,code,col=col,sig=sig,median=median,bptouse=bptouse,$
                 nobpc=nobpc,ravg=ravg,bpZero=bpZero

    if not keyword_set(code) then code=0
    nobpcl=0
    if keyword_set(nobpc) then nobpcl=1
    a=size(data)
    if  (a[0] lt 2) then message,'data must be a 2d map'
    ncols=a[1]
    nrows=a[2]
    if  (ncols eq 1 ) or (ncols eq 2) then message,'data must be a 2d map'
    docol=0
    if n_elements(col) eq 2 then begin 
        docol=1 
        col1=col[0] 
        col2=col[1] 
        if (col1 gt col2) or (col1 lt 0) or (col2 ge ncols) then $
            message,'cols for flattening must be 0 to ncols-1' 
    endif
;---------------------------------------------
;   here are the 5 band pass correction options.
;
;   no bandpass correction
;
    if keyword_set(nobpc) then begin
            d=data
    endif else begin
;
;   user supplied bandpass
;
    if n_elements(bptouse) ne 0 then begin
            bpcor=1./bptouse
            d=mav(data,bpcor)
    endif else begin
;
	if keyword_set(bpZero) then begin
       bpcor=(total(data,2)/(nrows*1.))
	   avgbpcor=mean(bpcor)
	   bpCorD=1./(bpCor + (bpZero -avgBpCor))
       d=mav(data,bpcor) 
	endif else begin
		
;
;   band pass correct using average of all
;
    if (code eq 0) then begin
        if not keyword_set(median) then begin
            bpcor=1./(total(data,2)/(nrows*1.))
            d=mav(data,bpcor)
        endif else begin
            bpcor=fltarr(ncols)
            bloc=transpose(data)
            for k=0,ncols-1 do begin
                bpcor[k]=median(bloc[*,k],/even)
            endfor
            d=mav(data,1./bpcor)
            bloc=''
        endelse
    endif else begin
;
;   band pass correct using blocks of n
;
    if (code gt 0) then begin
		if keyword_set(ravg) then begin
			bpc=meanrun(data,code)
            d=fltarr(ncols,nrows)
			d=data/bpc
		endif else begin 
        	if (nrows mod code) ne 0 then $
           		 message,'rows to avg must divide into number of rows'
        	nstp=nrows/code 
        	toavg=code
        	d=fltarr(ncols,nrows)
        	for i=0,nstp-1 do begin
           		i1=i*toavg &$
            	i2=i1+toavg-1 &$
            	bpcor=1./(total(data[*,i1:i2],2)/(toavg*1.))
            	d[*,i1:i2]=mav(data[*,i1:i2],bpcor) 
        	endfor
		endelse
    endif  else begin
;
;   band pass correct using channel +/- code locations from current
;
    if (code lt 0) then begin
        nstp=-code
        d=fltarr(ncols,nrows)
        for i=0,nrows-1L do begin &$
            case 1 of &$
                 i lt nstp: bpcor=data[*,i+nstp]
                 i ge (nrows-nstp): bpcor=data[*,i-nstp]
                 else:bpcor=(data[*,i-nstp]+data[*,i+nstp])*.5
            endcase 
            d[*,i]=data[*,i,0]/bpcor
        endfor
    endif 
    endelse
    endelse
    endelse
    endelse
	endelse

;---------------------------------------------
;
;   if flatten along a column
;
    if docol then begin
        a=1./(total(d[col1:col2,*],1)/(col2-col1+1.))
        d=transpose(mav(transpose(d),a))
    endif
; 
;   scale to sigma else just remove 1
;
    if keyword_set(sig) then begin 
        a=rms(d,/quiet)
        a=float(a)
        d=(d-a[0])/a[1]
    endif else begin
		if not (keyword_set(bpZero)) then begin
        	if (not nobpcl) or (nobpcl and docol) then d=d-1.
		endif
    endelse
    return,d
end
